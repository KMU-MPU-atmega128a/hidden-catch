NOTE: Code bytes are displayed in order matching the disassembly format in AVR documentation.
  For example, 'CALL 2B16' (example only, only labels should normally be used) is displayed as
  0x940E2B16 rather than in little endian byte order.

Interrupt Vectors

Program Code (text area)
_LCD_delay:
  ms                   --> R10
    000A5 92AA      ST	-Y,R10
    000A6 2EA0      MOV	R10,R16
FILE: C:\Users\user\Desktop\hidden-catch\lcd.c
(0001) #include "lcd.h"
(0002) 
(0003) void LCD_delay(Byte ms) { delay_ms(ms); }   // LCD time delay
    000A7 2D0A      MOV	R16,R10
    000A8 2711      CLR	R17
    000A9 940E 0257 CALL	_delay_ms
    000AB 90A9      LD	R10,Y+
    000AC 9508      RET
(0004) 
(0005) void PortInit(void) {
(0006)     DDRA = 0xFF;    // PORTA to output mode
_PortInit:
    000AD EF8F      LDI	R24,0xFF
    000AE BB8A      OUT	0x1A,R24
(0007)     DDRG = 0x0F;    // PORTG 0~3 to output mode
    000AF E08F      LDI	R24,0xF
    000B0 9380 0064 STS	0x64,R24
    000B2 9508      RET
(0008) }
_LCD_Data:
  ch                   --> R10
    000B3 92AA      ST	-Y,R10
    000B4 2EA0      MOV	R10,R16
(0009) 
(0010) void LCD_Data(Byte ch) {
(0011)     LCD_CTRL |=  (1 << LCD_RS); // RS  = 1
    000B5 9180 0065 LDS	R24,0x65
    000B7 6084      ORI	R24,4
    000B8 9380 0065 STS	0x65,R24
(0012)     LCD_CTRL &= ~(1 << LCD_RW); // R/W = 0 -> Enter data write cycle
    000BA 9180 0065 LDS	R24,0x65
    000BC 7F8D      ANDI	R24,0xFD
    000BD 9380 0065 STS	0x65,R24
(0013)     LCD_CTRL |=  (1 << LCD_EN); // enable LCD
    000BF 9180 0065 LDS	R24,0x65
    000C1 6081      ORI	R24,1
    000C2 9380 0065 STS	0x65,R24
(0014)     delay_us(50);
    000C4 E302      LDI	R16,0x32
    000C5 E010      LDI	R17,0
    000C6 940E 026E CALL	_delay_us
(0015) 
(0016)     LCD_WDATA = ch;             // Write DATA
    000C8 BAAB      OUT	0x1B,R10
(0017)     delay_us(50);
    000C9 E302      LDI	R16,0x32
    000CA E010      LDI	R17,0
    000CB 940E 026E CALL	_delay_us
(0018) 
(0019)     LCD_CTRL &= ~(1 << LCD_EN); // disable LCD
    000CD 9180 0065 LDS	R24,0x65
    000CF 7F8E      ANDI	R24,0xFE
    000D0 9380 0065 STS	0x65,R24
    000D2 90A9      LD	R10,Y+
    000D3 9508      RET
(0020) }   // Write Data to LCD Data Register (CGRAM, DDRAM)
_LCD_Comm:
  ch                   --> R10
    000D4 92AA      ST	-Y,R10
    000D5 2EA0      MOV	R10,R16
(0021) 
(0022) void LCD_Comm(Byte ch) {
(0023)     LCD_CTRL &= ~(1 << LCD_RS); // RS  = 0
    000D6 9180 0065 LDS	R24,0x65
    000D8 7F8B      ANDI	R24,0xFB
    000D9 9380 0065 STS	0x65,R24
(0024)     LCD_CTRL &= ~(1 << LCD_RW); // R/W = 0 -> Enter instruction write cycle
    000DB 9180 0065 LDS	R24,0x65
    000DD 7F8D      ANDI	R24,0xFD
    000DE 9380 0065 STS	0x65,R24
(0025)     LCD_CTRL |=  (1 << LCD_EN); // enable LCD
    000E0 9180 0065 LDS	R24,0x65
    000E2 6081      ORI	R24,1
    000E3 9380 0065 STS	0x65,R24
(0026)     delay_us(50);
    000E5 E302      LDI	R16,0x32
    000E6 E010      LDI	R17,0
    000E7 940E 026E CALL	_delay_us
(0027) 
(0028)     LCD_WINST = ch;             // Write INSTruction
    000E9 BAAB      OUT	0x1B,R10
(0029)     delay_us(50);
    000EA E302      LDI	R16,0x32
    000EB E010      LDI	R17,0
    000EC 940E 026E CALL	_delay_us
(0030) 
(0031)     LCD_CTRL &= ~(1 << LCD_EN); // disable LCD
    000EE 9180 0065 LDS	R24,0x65
    000F0 7F8E      ANDI	R24,0xFE
    000F1 9380 0065 STS	0x65,R24
    000F3 90A9      LD	R10,Y+
    000F4 9508      RET
(0032) }   // Write Instruction to LCD Instruction Register (CGRAM, DDRAM)
_LCD_Shift:
  p                    --> R20
    000F5 934A      ST	-Y,R20
    000F6 2F40      MOV	R20,R16
(0033) 
(0034) void LCD_Shift(char p) { // *
(0035)     if (p == RIGHT) {
    000F7 3041      CPI	R20,1
    000F8 F429      BNE	0x00FE
(0036)         LCD_Comm(0x1C);         // command: 0b00011100
    000F9 E10C      LDI	R16,0x1C
    000FA DFD9      RCALL	_LCD_Comm
(0037)         LCD_delay(1);
    000FB E001      LDI	R16,1
    000FC DFA8      RCALL	_LCD_delay
(0038)     }
    000FD C006      RJMP	0x0104
(0039)     else if (p == LEFT) {
    000FE 2344      TST	R20
    000FF F421      BNE	0x0104
(0040)         LCD_Comm(0x18);         // command: 0b00011000
    00100 E108      LDI	R16,0x18
    00101 DFD2      RCALL	_LCD_Comm
(0041)         LCD_delay(1);
    00102 E001      LDI	R16,1
    00103 DFA1      RCALL	_LCD_delay
    00104 9149      LD	R20,Y+
    00105 9508      RET
(0042)     }
(0043) }
_LCD_CHAR:
  c                    --> R10
    00106 92AA      ST	-Y,R10
    00107 2EA0      MOV	R10,R16
(0044) 
(0045) void LCD_CHAR(Byte c) {
(0046)     LCD_delay(1);
    00108 E001      LDI	R16,1
    00109 DF9B      RCALL	_LCD_delay
(0047)     LCD_Data(c);    // write char data C
    0010A 2D0A      MOV	R16,R10
    0010B DFA7      RCALL	_LCD_Data
    0010C 90A9      LD	R10,Y+
    0010D 9508      RET
(0048) }
_LCD_STR:
  str                  --> R20
    0010E 934A      ST	-Y,R20
    0010F 935A      ST	-Y,R21
    00110 01A8      MOVW	R20,R16
(0049) 
(0050) void LCD_STR(Byte *str) {
    00111 C005      RJMP	0x0117
(0051)     while (*str != 0) {
(0052)         LCD_CHAR(*str); // write string data 'str'
    00112 01FA      MOVW	R30,R20
    00113 8100      LD	R16,Z
    00114 DFF1      RCALL	_LCD_CHAR
(0053)         str++;
    00115 5F4F      SUBI	R20,0xFF
    00116 4F5F      SBCI	R21,0xFF
    00117 01FA      MOVW	R30,R20
    00118 8020      LD	R2,Z
    00119 2022      TST	R2
    0011A F7B9      BNE	0x0112
    0011B 9159      LD	R21,Y+
    0011C 9149      LD	R20,Y+
    0011D 9508      RET
(0054)     }
(0055) }
_LCD_pos:
  col                  --> R10
  row                  --> R12
    0011E 92AA      ST	-Y,R10
    0011F 92CA      ST	-Y,R12
    00120 2EA2      MOV	R10,R18
    00121 2EC0      MOV	R12,R16
(0056) 
(0057) void LCD_pos(unsigned char row, unsigned char col) {
(0058)     LCD_Comm(0x80 | (row * 0x40 + col));
    00122 2D2C      MOV	R18,R12
    00123 2733      CLR	R19
    00124 E400      LDI	R16,0x40
    00125 E010      LDI	R17,0
    00126 940E 0285 CALL	<LIBRARY>|empy16s
    00128 0D0A      ADD	R16,R10
    00129 6800      ORI	R16,0x80
    0012A DFA9      RCALL	_LCD_Comm
    0012B 90C9      LD	R12,Y+
    0012C 90A9      LD	R10,Y+
    0012D 9508      RET
(0059) }
(0060) 
(0061) void LCD_Clear(void) {
(0062)     LCD_Comm(0x01);
_LCD_Clear:
    0012E E001      LDI	R16,1
    0012F DFA4      RCALL	_LCD_Comm
(0063)     LCD_delay(2);
    00130 E002      LDI	R16,2
    00131 CF73      RJMP	_LCD_delay
(0064) }
(0065) 
(0066) void LCD_Init(void) {
(0067)     LCD_Comm(0x38); // DDRAM, 8 bit data 사용, lCD 2열로 사용
_LCD_Init:
    00132 E308      LDI	R16,0x38
    00133 DFA0      RCALL	_LCD_Comm
(0068)     LCD_delay(2);   // 2ms delay
    00134 E002      LDI	R16,2
    00135 DF6F      RCALL	_LCD_delay
(0069)     LCD_Comm(0x38);
    00136 E308      LDI	R16,0x38
    00137 DF9C      RCALL	_LCD_Comm
(0070)     LCD_delay(2);
    00138 E002      LDI	R16,2
    00139 DF6B      RCALL	_LCD_delay
(0071)     LCD_Comm(0x38);
    0013A E308      LDI	R16,0x38
    0013B DF98      RCALL	_LCD_Comm
(0072)     LCD_delay(2);
    0013C E002      LDI	R16,2
    0013D DF67      RCALL	_LCD_delay
(0073)     // 중요 초기 설정이라 3회 반복
(0074)     LCD_Comm(0x0E); // LCD 화면 ON, 커서 on, 문자 점멸 off
    0013E E00E      LDI	R16,0xE
    0013F DF94      RCALL	_LCD_Comm
(0075)     LCD_delay(2);
    00140 E002      LDI	R16,2
    00141 DF63      RCALL	_LCD_delay
(0076)     LCD_Comm(0x01); // Clear Display
    00142 E001      LDI	R16,1
    00143 DF90      RCALL	_LCD_Comm
(0077)     LCD_delay(30);
    00144 E10E      LDI	R16,0x1E
    00145 DF5F      RCALL	_LCD_delay
(0078)     LCD_Comm(0x06); // entry mode set (l->R 커서 이동, 화면 shift 없음)
    00146 E006      LDI	R16,6
    00147 DF8C      RCALL	_LCD_Comm
(0079)     LCD_delay(2);
    00148 E002      LDI	R16,2
    00149 CF5B      RJMP	_LCD_delay
(0080) }
(0081) 
(0082) void Cursor_Home(void) {
(0083)     LCD_Comm(0x02); // move LCD cursor to home
_Cursor_Home:
    0014A E002      LDI	R16,2
    0014B DF88      RCALL	_LCD_Comm
(0084)     LCD_delay(2);
    0014C E002      LDI	R16,2
    0014D CF57      RJMP	_LCD_delay
(0085) }
_CGRAM_set_menu:
  i                    --> R20
  i                    --> R20
  i                    --> R20
  i                    --> R20
  i                    --> R20
  i                    --> R20
  menu6                --> Y,+40
  menu5                --> Y,+32
  menu4                --> Y,+24
  menu3                --> Y,+16
  menu2                --> Y,+8
  menu1                --> Y,+0
    0014E 934A      ST	-Y,R20
    0014F 935A      ST	-Y,R21
    00150 97E0      SBIW	R28,0x30
    0014F 935A      ST	-Y,R21
    00150 97E0      SBIW	R28,0x30
FILE: C:\Users\user\Desktop\hidden-catch\main.c
(0001) #include <iom128v.h>
(0002) #include "my128.h"
(0003) #include "lcd.h"
(0004) 
(0005) void CGRAM_set_menu(void) { // 초기 화면 함수 ("다른문자찾기" 출력)
(0006)     Byte menu1[] = {0x02, 0x1E, 0x12, 0x13, 0x12, 0x1E, 0x02, 0x02};
    00151 ED84      LDI	R24,0xD4
    00152 E090      LDI	R25,0
    00153 01FE      MOVW	R30,R28
    00154 E008      LDI	R16,0x8
    00155 E010      LDI	R17,0
    00156 93FA      ST	-Y,R31
    00157 93EA      ST	-Y,R30
    00158 939A      ST	-Y,R25
    00159 938A      ST	-Y,R24
    0015A 940E 029F CALL	asgncblkx
(0007)     Byte menu2[] = {0x0E, 0x02, 0x0E, 0x08, 0x0E, 0x1F, 0x08, 0x0E};
    0015C ED8C      LDI	R24,0xDC
    0015D E090      LDI	R25,0
    0015E 01FE      MOVW	R30,R28
    0015F 9638      ADIW	R30,0x8
    00160 E008      LDI	R16,0x8
    00161 E010      LDI	R17,0
    00162 93FA      ST	-Y,R31
    00163 93EA      ST	-Y,R30
    00164 939A      ST	-Y,R25
    00165 938A      ST	-Y,R24
    00166 940E 029F CALL	asgncblkx
(0008)     Byte menu3[] = {0x0E, 0x0A, 0x0E, 0x00, 0x1F, 0x04, 0x08, 0x0E};
    00168 EE84      LDI	R24,0xE4
    00169 E090      LDI	R25,0
    0016A 01FE      MOVW	R30,R28
    0016B 9670      ADIW	R30,0x10
    0016C E008      LDI	R16,0x8
    0016D E010      LDI	R17,0
    0016E 93FA      ST	-Y,R31
    0016F 93EA      ST	-Y,R30
    00170 939A      ST	-Y,R25
    00171 938A      ST	-Y,R24
    00172 940E 029F CALL	asgncblkx
(0009)     Byte menu4[] = {0x02, 0x1E, 0x0A, 0x17, 0x16, 0x02, 0x02, 0x00};
    00174 EE8C      LDI	R24,0xEC
    00175 E090      LDI	R25,0
    00176 01FE      MOVW	R30,R28
    00177 9678      ADIW	R30,0x18
    00178 E008      LDI	R16,0x8
    00179 E010      LDI	R17,0
    0017A 93FA      ST	-Y,R31
    0017B 93EA      ST	-Y,R30
    0017C 939A      ST	-Y,R25
    0017D 938A      ST	-Y,R24
    0017E 940E 029F CALL	asgncblkx
(0010)     Byte menu5[] = {0x0A, 0x1E, 0x0B, 0x16, 0x02, 0x0E, 0x04, 0x0A};
    00180 EF84      LDI	R24,0xF4
    00181 E090      LDI	R25,0
    00182 01FE      MOVW	R30,R28
    00183 96B0      ADIW	R30,0x20
    00184 E008      LDI	R16,0x8
    00185 E010      LDI	R17,0
    00186 93FA      ST	-Y,R31
    00187 93EA      ST	-Y,R30
    00188 939A      ST	-Y,R25
    00189 938A      ST	-Y,R24
    0018A 940E 029F CALL	asgncblkx
(0011)     Byte menu6[] = {0x02, 0x1A, 0x0A, 0x0A, 0x0A, 0x0A, 0x02, 0x02};
    0018C EF8C      LDI	R24,0xFC
    0018D E090      LDI	R25,0
    0018E 01FE      MOVW	R30,R28
    0018F 96B8      ADIW	R30,0x28
    00190 E008      LDI	R16,0x8
    00191 E010      LDI	R17,0
    00192 93FA      ST	-Y,R31
    00193 93EA      ST	-Y,R30
    00194 939A      ST	-Y,R25
    00195 938A      ST	-Y,R24
    00196 940E 029F CALL	asgncblkx
(0012) 
(0013)     LCD_Comm(0x40); // CGRAM 주소: 0b01 000000
    00198 E400      LDI	R16,0x40
    00199 940E 00D4 CALL	_LCD_Comm
(0014)     LCD_delay(1);
    0019B E001      LDI	R16,1
    0019C 940E 00A5 CALL	_LCD_delay
(0015)     for (int i = 0; i < 8; i++) {
    0019E 2744      CLR	R20
    0019F 2755      CLR	R21
    001A0 C00C      RJMP	0x01AD
(0016)         LCD_Data(menu1[i]);
    001A1 01CE      MOVW	R24,R28
    001A2 01FA      MOVW	R30,R20
    001A3 0FE8      ADD	R30,R24
    001A4 1FF9      ADC	R31,R25
    001A5 8100      LD	R16,Z
    001A6 940E 00B3 CALL	_LCD_Data
(0017)         LCD_delay(1);
    001A8 E001      LDI	R16,1
    001A9 940E 00A5 CALL	_LCD_delay
    001AB 5F4F      SUBI	R20,0xFF
    001AC 4F5F      SBCI	R21,0xFF
    001AD E088      LDI	R24,0x8
    001AE E090      LDI	R25,0
    001AF 1748      CP	R20,R24
    001B0 0759      CPC	R21,R25
    001B1 F37C      BLT	0x01A1
(0018)     }
(0019) 
(0020)     LCD_Comm(0x48); // CGRAM 주소: 0b01 001000
    001B2 E408      LDI	R16,0x48
    001B3 940E 00D4 CALL	_LCD_Comm
(0021)     LCD_delay(1);
    001B5 E001      LDI	R16,1
    001B6 940E 00A5 CALL	_LCD_delay
(0022)     for (int i = 0; i < 8; i++) {
    001B8 2744      CLR	R20
    001B9 2755      CLR	R21
    001BA C00D      RJMP	0x01C8
(0023)         LCD_Data(menu2[i]);
    001BB 01CE      MOVW	R24,R28
    001BC 9608      ADIW	R24,0x8
    001BD 01FA      MOVW	R30,R20
    001BE 0FE8      ADD	R30,R24
    001BF 1FF9      ADC	R31,R25
    001C0 8100      LD	R16,Z
    001C1 940E 00B3 CALL	_LCD_Data
(0024)         LCD_delay(1);
    001C3 E001      LDI	R16,1
    001C4 940E 00A5 CALL	_LCD_delay
    001C6 5F4F      SUBI	R20,0xFF
    001C7 4F5F      SBCI	R21,0xFF
    001C8 E088      LDI	R24,0x8
    001C9 E090      LDI	R25,0
    001CA 1748      CP	R20,R24
    001CB 0759      CPC	R21,R25
    001CC F374      BLT	0x01BB
(0025)     }
(0026) 
(0027)     LCD_Comm(0x50); // CGRAM 주소: 0b01 010000
    001CD E500      LDI	R16,0x50
    001CE 940E 00D4 CALL	_LCD_Comm
(0028)     LCD_delay(1);
    001D0 E001      LDI	R16,1
    001D1 940E 00A5 CALL	_LCD_delay
(0029)     for (int i = 0; i < 8; i++) {
    001D3 2744      CLR	R20
    001D4 2755      CLR	R21
    001D5 C00D      RJMP	0x01E3
(0030)         LCD_Data(menu3[i]);
    001D6 01CE      MOVW	R24,R28
    001D7 9640      ADIW	R24,0x10
    001D8 01FA      MOVW	R30,R20
    001D9 0FE8      ADD	R30,R24
    001DA 1FF9      ADC	R31,R25
    001DB 8100      LD	R16,Z
    001DC 940E 00B3 CALL	_LCD_Data
(0031)         LCD_delay(1);
    001DE E001      LDI	R16,1
    001DF 940E 00A5 CALL	_LCD_delay
    001E1 5F4F      SUBI	R20,0xFF
    001E2 4F5F      SBCI	R21,0xFF
    001E3 E088      LDI	R24,0x8
    001E4 E090      LDI	R25,0
    001E5 1748      CP	R20,R24
    001E6 0759      CPC	R21,R25
    001E7 F374      BLT	0x01D6
(0032)     }
(0033) 
(0034)     LCD_Comm(0x58); // CGRAM 주소: 0b01 011000
    001E8 E508      LDI	R16,0x58
    001E9 940E 00D4 CALL	_LCD_Comm
(0035)     LCD_delay(1);
    001EB E001      LDI	R16,1
    001EC 940E 00A5 CALL	_LCD_delay
(0036)     for (int i = 0; i < 8; i++) {
    001EE 2744      CLR	R20
    001EF 2755      CLR	R21
    001F0 C00D      RJMP	0x01FE
(0037)         LCD_Data(menu4[i]);
    001F1 01CE      MOVW	R24,R28
    001F2 9648      ADIW	R24,0x18
    001F3 01FA      MOVW	R30,R20
    001F4 0FE8      ADD	R30,R24
    001F5 1FF9      ADC	R31,R25
    001F6 8100      LD	R16,Z
    001F7 940E 00B3 CALL	_LCD_Data
(0038)         LCD_delay(1);
    001F9 E001      LDI	R16,1
    001FA 940E 00A5 CALL	_LCD_delay
    001FC 5F4F      SUBI	R20,0xFF
    001FD 4F5F      SBCI	R21,0xFF
    001FE E088      LDI	R24,0x8
    001FF E090      LDI	R25,0
    00200 1748      CP	R20,R24
    00201 0759      CPC	R21,R25
    00202 F374      BLT	0x01F1
(0039)     }
(0040) 
(0041)     LCD_Comm(0x60); // CGRAM 주소: 0b01 100000
    00203 E600      LDI	R16,0x60
    00204 940E 00D4 CALL	_LCD_Comm
(0042)     LCD_delay(1);
    00206 E001      LDI	R16,1
    00207 940E 00A5 CALL	_LCD_delay
(0043)     for (int i = 0; i < 8; i++) {
    00209 2744      CLR	R20
    0020A 2755      CLR	R21
    0020B C00D      RJMP	0x0219
(0044)         LCD_Data(menu5[i]);
    0020C 01CE      MOVW	R24,R28
    0020D 9680      ADIW	R24,0x20
    0020E 01FA      MOVW	R30,R20
    0020F 0FE8      ADD	R30,R24
    00210 1FF9      ADC	R31,R25
    00211 8100      LD	R16,Z
    00212 940E 00B3 CALL	_LCD_Data
(0045)         LCD_delay(1);
    00214 E001      LDI	R16,1
    00215 940E 00A5 CALL	_LCD_delay
    00217 5F4F      SUBI	R20,0xFF
    00218 4F5F      SBCI	R21,0xFF
    00219 E088      LDI	R24,0x8
    0021A E090      LDI	R25,0
    0021B 1748      CP	R20,R24
    0021C 0759      CPC	R21,R25
    0021D F374      BLT	0x020C
(0046)     }
(0047) 
(0048)     LCD_Comm(0x68); // CGRAM 주소: 0b01 101000
    0021E E608      LDI	R16,0x68
    0021F 940E 00D4 CALL	_LCD_Comm
(0049)     LCD_delay(1);
    00221 E001      LDI	R16,1
    00222 940E 00A5 CALL	_LCD_delay
(0050)     for (int i = 0; i < 8; i++) {
    00224 2744      CLR	R20
    00225 2755      CLR	R21
    00226 C00D      RJMP	0x0234
(0051)         LCD_Data(menu6[i]);
    00227 01CE      MOVW	R24,R28
    00228 9688      ADIW	R24,0x28
    00229 01FA      MOVW	R30,R20
    0022A 0FE8      ADD	R30,R24
    0022B 1FF9      ADC	R31,R25
    0022C 8100      LD	R16,Z
    0022D 940E 00B3 CALL	_LCD_Data
(0052)         LCD_delay(1);
    0022F E001      LDI	R16,1
    00230 940E 00A5 CALL	_LCD_delay
    00232 5F4F      SUBI	R20,0xFF
    00233 4F5F      SBCI	R21,0xFF
    00234 E088      LDI	R24,0x8
    00235 E090      LDI	R25,0
    00236 1748      CP	R20,R24
    00237 0759      CPC	R21,R25
    00238 F374      BLT	0x0227
    00239 96E0      ADIW	R28,0x30
    0023A 9159      LD	R21,Y+
    0023B 9149      LD	R20,Y+
    0023C 9508      RET
(0053)     }
(0054) }
_LCD_menu:
  i                    --> R20
    0023D 934A      ST	-Y,R20
(0055) 
(0056) void LCD_menu(void) {   // 초기 문자 "다른문자찾기" LCD에 출력
(0057)     for (Byte i = 0x00; i < 0x06; i++) {
    0023E 2744      CLR	R20
    0023F C007      RJMP	0x0247
(0058)         LCD_Data(i);
    00240 2F04      MOV	R16,R20
    00241 940E 00B3 CALL	_LCD_Data
(0059)         LCD_delay(1);
    00243 E001      LDI	R16,1
    00244 940E 00A5 CALL	_LCD_delay
    00246 9543      INC	R20
    00247 3046      CPI	R20,6
    00248 F3B8      BCS	0x0240
    00249 9149      LD	R20,Y+
    0024A 9508      RET
(0060)     }
(0061) }
(0062) 
(0063) 
(0064) void main(void) {
(0065)     PortInit();
_main:
    0024B 940E 00AD CALL	_PortInit
(0066)     LCD_Init();
    0024D 940E 0132 CALL	_LCD_Init
(0067)     CGRAM_set_menu();
    0024F DEFE      RCALL	_CGRAM_set_menu
(0068) 
(0069)     Cursor_Home();
    00250 940E 014A CALL	_Cursor_Home
(0070)     LCD_menu();
    00252 DFEA      RCALL	_LCD_menu
(0071)     delay_ms(10);
    00253 E00A      LDI	R16,0xA
    00254 E010      LDI	R17,0
    00255 940C 0257 JMP	_delay_ms
(0072) 
(0073) 
(0074) }
_delay_ms:
  i                    --> R20
  j                    --> R22
  m                    --> R16
    00257 940E 0295 CALL	push_xgsetF000
    00258 0295      MULS	R25,R21
FILE: C:\Users\user\Desktop\hidden-catch\my128.c
(0001) #include "my128.h"
(0002) 
(0003) void delay_ms(unsigned int m) {
(0004)     unsigned int i, j;
(0005)     
(0006)     for (i = 0; i < m; i++)
    00259 2744      CLR	R20
    0025A 2755      CLR	R21
    0025B C00C      RJMP	0x0268
(0007)         for (j = 0; j < 2130; j++)
    0025C 2766      CLR	R22
    0025D 2777      CLR	R23
    0025E C002      RJMP	0x0261
    0025F 5F6F      SUBI	R22,0xFF
    00260 4F7F      SBCI	R23,0xFF
    00261 E582      LDI	R24,0x52
    00262 E098      LDI	R25,0x8
    00263 1768      CP	R22,R24
    00264 0779      CPC	R23,R25
    00265 F3C8      BCS	0x025F
    00266 5F4F      SUBI	R20,0xFF
    00267 4F5F      SBCI	R21,0xFF
    00268 1740      CP	R20,R16
    00269 0751      CPC	R21,R17
    0026A F388      BCS	0x025C
    0026B 940C 029A JMP	pop_xgsetF000
    0026D 9508      RET
(0008)             ;
(0009) }   // delay_ms definition
_delay_us:
  i                    --> R20
  j                    --> R22
  m                    --> R16
    0026E 940E 0295 CALL	push_xgsetF000
(0010) 
(0011) void delay_us(unsigned int m) {
(0012)     unsigned int i, j;
(0013) 
(0014)     for (i = 0; i < m; i++)
    00270 2744      CLR	R20
    00271 2755      CLR	R21
    00272 C00C      RJMP	0x027F
(0015)         for (j = 0; j < 2; j++)
    00273 2766      CLR	R22
    00274 2777      CLR	R23
    00275 C002      RJMP	0x0278
    00276 5F6F      SUBI	R22,0xFF
    00277 4F7F      SBCI	R23,0xFF
    00278 E082      LDI	R24,2
    00279 E090      LDI	R25,0
    0027A 1768      CP	R22,R24
    0027B 0779      CPC	R23,R25
    0027C F3C8      BCS	0x0276
    0027D 5F4F      SUBI	R20,0xFF
    0027E 4F5F      SBCI	R21,0xFF
    0027F 1740      CP	R20,R16
    00280 0751      CPC	R21,R17
    00281 F388      BCS	0x0273
    00282 940C 029A JMP	pop_xgsetF000
    00284 9508      RET
(0016)             ;
(0017) }   // delay_us definition
<LIBRARY>|empy16s:
    00285 920A      ST	-Y,R0
    00286 921A      ST	-Y,R1
    00287 938A      ST	-Y,R24
    00288 939A      ST	-Y,R25
    00289 9F02      MUL	R16,R18
    0028A 01C0      MOVW	R24,R0
    0028B 9F12      MUL	R17,R18
    0028C 0D90      ADD	R25,R0
    0028D 9F03      MUL	R16,R19
    0028E 0D90      ADD	R25,R0
    0028F 018C      MOVW	R16,R24
    00290 9199      LD	R25,Y+
    00291 9189      LD	R24,Y+
    00292 9019      LD	R1,Y+
    00293 9009      LD	R0,Y+
    00294 9508      RET
